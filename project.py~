import networkx as nx
import matplotlib.pyplot as plt
import math
from collections import defaultdict

def create_digraph():

    G = nx.DiGraph()

    # Add nodes with a 'type' attribute, there will be other attributes: a, c, q, etc.
    #G.add_node('CPU_1', type='CPU')
    #G.add_node('CPU_1', _type='CPU', _wcet = 3, _bcet = 5) ##How to add other specs
    G.add_node('CPU_1', _type='CPU') ##How to add other specs
    G.add_node('CPU_2', _type='CPU')
    G.add_node('CPU_3', _type='CPU')
    G.add_node('CPU_4', _type='CPU')
    G.add_node('CPU_5', _type='CPU')
    G.add_node('CPU_6', _type='CPU')
    G.add_node('CPU_7', _type='CPU')
    G.add_node('CPU_8', _type='CPU')
    G.add_node('CPU_9', _type='CPU')
    G.add_node('CPU_10', _type='CPU')
    G.add_node('CPU_11', _type='CPU')
    
    G.add_node('CE_1', _type='CE')
    G.add_node('CE_2', _type='CE')
    G.add_node('CE_3', _type='CE')
    G.add_node('CE_4', _type='CE')
    
    G.add_node('SM_1', _type='SM')
    G.add_node('SM_2', _type='SM')
    G.add_node('SM_3', _type='SM')
    G.add_node('SM_4', _type='SM')
    G.add_node('SM_5', _type='SM')
    
    

    # Add directed edges between nodes
    #G.add_edge('CPU_1', 'SM_1', relation='controls')

    G.add_edge('CPU_1', 'CE_1', relation='1') #1
    G.add_edge('CE_1', 'CPU_2', relation='2') #2

    G.add_edge('CPU_2', 'SM_1', relation='3') #3
    G.add_edge('SM_1', 'SM_2', relation='4') #4
    G.add_edge('SM_2', 'SM_3', relation='5') #5
    G.add_edge('SM_3', 'CPU_7', relation='6') #6

    G.add_edge('CPU_2', 'CPU_3', relation='15') #15
    
    G.add_edge('CPU_3', 'CPU_4', relation='16') #16
    G.add_edge('CPU_4', 'CPU_6', relation='20') #20

    G.add_edge('CPU_3', 'CPU_5', relation='17') #17
    G.add_edge('CPU_5', 'CPU_6', relation='21') #21

    G.add_edge('CPU_3', 'SM_4', relation='18') #18
    G.add_edge('SM_4', 'CPU_6', relation='19') #19

    G.add_edge('CPU_6', 'CPU_7', relation='22') #22

    G.add_edge('CPU_7', 'CE_2', relation='7') #7
    G.add_edge('CE_2', 'CPU_8', relation='8') #8

    G.add_edge('CPU_8', 'CE_3', relation='9') #9
    G.add_edge('CE_3', 'CPU_9', relation='10') #10

    G.add_edge('CPU_9', 'SM_5', relation='11') #11
    G.add_edge('SM_5', 'CPU_10', relation='12') #12

    G.add_edge('CPU_10', 'CE_4', relation='13') #13
    G.add_edge('CE_4', 'CPU_11', relation='14') #14
    
    
    return G


def visualize_graph(G):

    
    color_map = []
    for node in G.nodes(data=True):
        print(node)
        if node[1]['type'] == 'CPU':
            color_map.append('blue')
        elif node[1]['type'] == 'SM':
            color_map.append('green')
        elif node[1]['type'] == 'CE':
            color_map.append('red')

    # Draw the graph
    pos = nx.bfs_layout(G, G.nodes()[0])  # Positioning layout for better visualization
    nx.draw(G, pos, with_labels=True, node_color=color_map, node_size=2000, font_size=10, font_color='white')
        
    # Add edge labels
    #edge_labels = nx.get_edge_attributes(G, 'suspension')
    #nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)

    # Show the plot
    plt.show()


def visualize_bfs(G):
    # Choose a starting node for BFS
    start_node = next(iter(G.nodes()))

    # Perform BFS to get edges in BFS order
    bfs_edges = list(nx.bfs_edges(G, start_node))

    # Create a position dictionary to store the layout positions
    pos = {}
    x, y = 0, 0  # Start position for the root node

    # Manually assign positions based on BFS
    for edge in bfs_edges:
        parent, child = edge
        if parent not in pos:
            pos[parent] = (x, y)
            x += 1  # Move right for each new parent node
    
        # Position child nodes directly below their parent
        pos[child] = (pos[parent][0], pos[parent][1] - 1)

    # Add the start_node if it doesn't have any children
    if start_node not in pos:
        pos[start_node] = (0, 0)

    # Draw the graph using the custom BFS layout
    nx.draw(G, pos, with_labels=True, node_color="lightblue", node_size=500, font_size=10)
    plt.show()

def visualize_bfs_w_depth(G):
    # Ensure the graph is not empty
    if len(G.nodes()) == 0:
        print("Graph is empty!")
        return
    
    # Select a valid start node
    start_node = next(iter(G.nodes()))
    print("Starting BFS from node:", start_node)
    
    # Perform BFS and track node depths
    bfs_edges = list(nx.bfs_edges(G, start_node))
    
    # Create a dictionary to store the depth of each node
    depth_dict = {start_node: 0}
    for parent, child in bfs_edges:
        depth_dict[child] = depth_dict[parent] + 1
    
    # Group nodes by their depth
    depth_levels = defaultdict(list)
    for node, depth in depth_dict.items():
        depth_levels[depth].append(node)
    
    # Create a position dictionary to store the layout positions
    pos = {}
    y_spacing = -0.5  # Vertical spacing between levels
    x_spacing = 1  # Horizontal spacing between nodes at the same level
    
    for depth, nodes_at_depth in depth_levels.items():
        x = 0  # Reset horizontal position for each depth level
        for node in nodes_at_depth:
            pos[node] = (x, y_spacing * depth)  # Assign position (x, y) based on depth
            x += x_spacing  # Space nodes horizontally

    color_map = []
    for node in G.nodes(data=True):
        print(node)
        if node[1]['type'] == 'CPU':
            color_map.append('blue')
        elif node[1]['type'] == 'SM':
            color_map.append('green')
        elif node[1]['type'] == 'CE':
            color_map.append('red')
            
    # Draw the graph using the custom BFS layout
    nx.draw(G, pos, with_labels=True, node_color=color_map, node_size=500, font_size=10)
    plt.show()
    
'''
def launch_analysis(_exec, _input):

    output = (_exec, _input)
    output = parse_output
    
    return output

def do_the_compute():

    _continue = TRUE
    while(_continue):
        for i in range(1, 3):
            output = launch_analysis(_exec, _input)
            _input = revisit(output, input_l, i)
 '''

#It's iterative, recursive would be so much more better
def paths(G):

    nodes = list(G.nodes(data=True))
    paths = []
    for _node in nodes:
        for _iter in nodes:
            if(_node[1]['_type'] == _iter[1]['_type'] and _node[0] != _iter[0]):
                #print("1:", _node, "2:", _iter)
                ##Change this with bfs with incremental depth later
                '''
                all_paths = list(nx.all_simple_paths(G, source=_node[0], target=_iter[0]))
                if(len(all_paths) != 0):
                    print("len:", len(all_paths))
                    for path in all_paths:
                        print(path)
                '''
                bfs = list(nx.dfs_tree(G, source=_node[0], depth_limit=2))
                print("node:", _node[0], bfs)

def recursive_paths_first(G):

    nodes = list(G.nodes(data=True))
    #print(nodes)
    for node in nodes:
        out_edges = G.out_edges(nbunch = node[0])
        in_edges = G.in_edges(nbunch = node[0]) ##This will be needed later
        print("node:", node, "out_edges:", G.out_edges(nbunch = node[0]))
        print("node:", node, "in_edges:", G.in_edges(nbunch = node[0]))

def check_different(G, path):

    different = False
    nodes = dict(G.nodes)
    first = nodes[path[0][0]]["_type"]
    for edge in path:
        if(nodes[edge[0]]["_type"] != first):
            different = True
        if(nodes[edge[1]]["_type"] != first):
            different = True
    print("different: ", different)
    return different

##Start is the node where search is started, source and destination define an edge
def recursive_search(G, node_start, node_source, node_destination, path):
    path.append((node_source, node_destination))
    print("##################################")
    print("4: node_start:", node_start)
    print("5: node_source:", node_source)
    print("6: node_destination:", node_destination)
    print("6.5 path:", path)
    nodes = dict(G.nodes)
    ##All conditions satisfied, FOUND
    if(nodes[node_destination]["_type"] == nodes[node_start]["_type"] and check_different(G, path)):
        print("FOUND!")
        return path
    ##Start with consecutively same types, SKIP
    elif(not check_different(G, path) and len(path) == 2):
        return
    ##Same types exist but there are other, 
    elif(nodes[node_source]["_type"] == nodes[node_destination]["_type"] and not check_different(G, path)):
        return
    else:
        new_out_edges = G.out_edges(nbunch = node_destination)
        print("7: new_out_edges:", new_out_edges)
        print("##################################")
        temp = node_source
        node_source = node_destination
        for edge in new_out_edges:
            node_destination = edge[1]
            return recursive_search(G, node_start, node_source, node_destination, path)


def recursive_paths(G):

    nodes = dict(G.nodes(data=True))
    all_suspensions = []
    print("1: nodes:", nodes)
    for node in nodes:
        print("2: node:", node)
        out_edges = G.out_edges(nbunch = node) 
        print("3: node:", node, "out_edges:", out_edges)
        for edge in out_edges:
            path = []
            path = recursive_search(G, node, node, edge[1], path)
            print("##IF EVER RETURNS: path: ", path)
            all_suspensions.append(path)
    print("all suspensions:")
    for suspension in all_suspensions:
        print(suspension)
    
if __name__ == "__main__":

    DIG = create_digraph()
    #paths(DIG)
    recursive_paths(DIG)
    #visualize_bfs_w_depth(DIG)
    #do_the_compute()
